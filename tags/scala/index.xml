<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Tutorials by Ahmet Emre Aladağ </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tuts.emrealadag.com/tags/scala/index.xml</link>
    <language>en-us</language>
    <author>Ahmet Emre Aladağ</author>
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Redirecting Akka Documentation URLs</title>
      <link>http://tuts.emrealadag.com/post/redirecting-akka-documentation-url/</link>
      <pubDate>Sat, 30 Apr 2016 16:40:59 &#43;0200</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/redirecting-akka-documentation-url/</guid>
      <description>&lt;p&gt;When you search for Akka-related things on Google and you want to display a page on Akka Documentation, two problems might arise:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) You are a Scala developer and the Google result is for Java.
2) You are using version 2.4.2 but the page is for 2.3.13.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or maybe both. You would probably wish a plugin to redirect you to correct page automatically. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://doc.akka.io/docs/akka/2.3.13/java/actors.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://doc.akka.io/docs/akka/2.4.2/scala/actors.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://chrome.google.com/webstore/detail/redirector/pajiegeliagebegjdhebejdlknciafen/related&#34;&gt;this Chrome plugin&lt;/a&gt; to set regex URL redirections.&lt;/p&gt;

&lt;p&gt;For Akka version 2.4.2 supporting Scala, add the following regex rules on the settings page of the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;From: ^http://doc.akka.io/docs/akka/(.*?)/(.*)/(.*)    
To: http://doc.akka.io/docs/akka/2.4.2/scala/$3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are similar plugins for Safari but I could see none with regex support.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Play Apps via Docker</title>
      <link>http://tuts.emrealadag.com/post/running-play-apps-via-docker/</link>
      <pubDate>Sat, 03 Oct 2015 16:40:59 &#43;0200</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/running-play-apps-via-docker/</guid>
      <description>

&lt;p&gt;In this tutorial, I will guide you running your Play framework application (named MyProject in our tutorial) via Docker. I assume you have created a Play project with a build.sbt (or equivalent) file and make sure it&amp;rsquo;s running on port 9000 with sbt run command.&lt;/p&gt;

&lt;p&gt;Our demo project pulls tweets from Twitter of a specified person so it requires environment variables &lt;em&gt;CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET&lt;/em&gt; to be set before running.&lt;/p&gt;

&lt;h2 id=&#34;docker-installation&#34;&gt;Docker Installation&lt;/h2&gt;

&lt;p&gt;Make sure you have installed the latest version of Docker Toolbox. In order to use docker command, Docker needs some environment variables to be set. To do this, Docker introduces Docker QuickStart Terminal.&lt;/p&gt;

&lt;p&gt;Run Docker Quickstart Terminal from Launchpad. A new terminal tab will open either on Terminal or iTerm app (depending on which one you chose at the installation). Check if any docker containers exist:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets check the DOCKER_HOST (we will use this IP instead of localhost when reaching the app).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see something like tcp://192.168.99.100:2376. This means we will use IP address 192.168.99.100 for reaching our apps.&lt;/p&gt;

&lt;h2 id=&#34;building-docker-image-with-sbt&#34;&gt;Building Docker Image with SBT&lt;/h2&gt;

&lt;p&gt;Now that we have Docker installed and running, we can build a Docker image for our Play App. We can use SBT Native Packager plugin&amp;rsquo;s docker feature to build a Docker image for the Play app (named MyProject). Before using the plugin, we have to add some config parameters to build.sbt of the Play project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dockerExposedPorts := Seq(9000, 9443)
dockerExposedVolumes := Seq(&amp;quot;/opt/docker/logs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will add instructions to the Dockerfile to expose 9000 and 9443 ports and let us read logs outside the container. Then build the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd MyProject
$ sbt docker:publishLocal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check docker images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see a table listing all docker images available.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;REPOSITORY&lt;/th&gt;
&lt;th&gt;TAG&lt;/th&gt;
&lt;th&gt;IMAGE ID&lt;/th&gt;
&lt;th&gt;CREATED&lt;/th&gt;
&lt;th&gt;VIRTUAL SIZE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;myproject&lt;/td&gt;
&lt;td&gt;1.0-SNAPSHOT&lt;/td&gt;
&lt;td&gt;cd25bf99efa9&lt;/td&gt;
&lt;td&gt;2 minutes ago&lt;/td&gt;
&lt;td&gt;925.8 MB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;java&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;7547e52aac4b&lt;/td&gt;
&lt;td&gt;3 weeks ago&lt;/td&gt;
&lt;td&gt;817.5 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;creating-the-container&#34;&gt;Creating the Container&lt;/h2&gt;

&lt;p&gt;We now see the image named myproject created for our app. Let&amp;rsquo;s create a container with this image with environment variables and ports added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name MyProject -p 9000:9000 -e CONSUMER_KEY=abcd -e CONSUMER_SECRET=abcd -e ACCESS_TOKEN=abcd -e ACCESS_TOKEN_SECRET=abcd myproject:1.0-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use myproject image with 1.0-SNAPSHOT tag.&lt;/li&gt;
&lt;li&gt;expose port 9000 (right one) of inner Play app to 9000 (left one) of the outer system.&lt;/li&gt;
&lt;li&gt;name the container as myproject.&lt;/li&gt;
&lt;li&gt;give environment variables CONSUMER_KEY, CONSUMER_SECRET&amp;hellip; with -e parameter for each.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Console will show logs for the app and navigate to &lt;a href=&#34;http://192.168.99.100:9000&#34;&gt;http://192.168.99.100:9000&lt;/a&gt; (the DOCKER_HOST) to reach the app. You can stop the container with Ctrl/CMD+C.&lt;/p&gt;

&lt;h2 id=&#34;restarting-the-container&#34;&gt;Restarting the Container&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the container has exited.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;CONTAINER ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IMAGE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;COMMAND&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;CREATED&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;STATUS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PORTS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NAMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;c9b768dac51e&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;myproject:1.0-SNAPSHOT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;bin/myproject&amp;rdquo;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10 minutes ago&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Exited (130) 30 seconds ago&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MyProject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now restart the container (initials of the id is sufficient):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker start c9b
$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we see the running containers:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CONTAINER ID&lt;/th&gt;
&lt;th&gt;IMAGE&lt;/th&gt;
&lt;th&gt;COMMAND&lt;/th&gt;
&lt;th&gt;CREATED&lt;/th&gt;
&lt;th&gt;STATUS&lt;/th&gt;
&lt;th&gt;PORTS&lt;/th&gt;
&lt;th&gt;NAMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;c9b768dac51e&lt;/td&gt;
&lt;td&gt;myproject:1.0-SNAPSHOT&lt;/td&gt;
&lt;td&gt;&amp;ldquo;bin/myproject&amp;rdquo;&lt;/td&gt;
&lt;td&gt;11 minutes ago&lt;/td&gt;
&lt;td&gt;Up 13 seconds&lt;/td&gt;
&lt;td&gt;0.0.0.0:9000-&amp;gt;9000/tcp, 9443/tcp&lt;/td&gt;
&lt;td&gt;MyProject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;stopping-the-container&#34;&gt;Stopping the Container&lt;/h2&gt;

&lt;p&gt;When you restart the container, it will run in the deamon mode. you can stop it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker stop c9b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re done!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
