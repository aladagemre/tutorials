<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Installation on Tutorials by Ahmet Emre Aladağ </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tuts.emrealadag.com/tags/installation/</link>
    <language>en-us</language>
    <author>Ahmet Emre Aladağ</author>
    
    <updated>Sun, 10 Jan 2016 16:09:37 EET</updated>
    
    <item>
      <title>Cloudfront CDN for Amazon S3 Static Web Hosting</title>
      <link>http://tuts.emrealadag.com/post/cloudfront-cdn-for-s3-static-web-hosting/</link>
      <pubDate>Sun, 10 Jan 2016 16:09:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/cloudfront-cdn-for-s3-static-web-hosting/</guid>
      <description>

&lt;p&gt;In this post, I will be guiding you how to setup an Amazon S3 bucket as a static website, then configure CloudFront CDN to serve in front of Amazon S3. Outline is as following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a S3 Bucket&lt;/li&gt;
&lt;li&gt;Configure Amazon S3 to serve as a static website&lt;/li&gt;
&lt;li&gt;Create Cloudfront distribution.&lt;/li&gt;
&lt;li&gt;Set Route53 records&lt;/li&gt;
&lt;li&gt;Restrict S3 access to Cloudfront&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;amazon-s3:002aebe340d456bc11a63f3385f2d580&#34;&gt;Amazon S3&lt;/h2&gt;

&lt;p&gt;Create an S3 bucket and then follow &lt;strong&gt;Amazon S3 bucket properties&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permissions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Edit bucket policy&lt;/strong&gt; and paste the following text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
	&amp;quot;Statement&amp;quot;: [
		{
			&amp;quot;Sid&amp;quot;: &amp;quot;PublicReadGetObject&amp;quot;,
			&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
			&amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
			&amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
			&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::www.mysite.com/*&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazon S3 bucket properties -&amp;gt; Static Web Hosting, choose &lt;strong&gt;Enable website hosting&lt;/strong&gt; and provide Index Document as &lt;em&gt;index.html&lt;/em&gt;. You will see the site url there: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt;. Now upload some file and check if your site is working.&lt;/p&gt;

&lt;h2 id=&#34;cloudfront:002aebe340d456bc11a63f3385f2d580&#34;&gt;Cloudfront&lt;/h2&gt;

&lt;p&gt;Navigate to CloudFront. Click on &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home?region=us-east-1#create-distribution:&#34;&gt;Create Distribution&lt;/a&gt; button. Choose &lt;strong&gt;Get Started&lt;/strong&gt; below &lt;strong&gt;Web&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name&lt;/strong&gt;: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt; (write the path you see in Amazon S3 bucket properties -&amp;gt; Static Web Hosting -&amp;gt; Endpoint: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt;). You could choose your S3 Bucket here but if you do so, you won&amp;rsquo;t be able to display subdirectories: &lt;em&gt;&lt;a href=&#34;http://www.mysite.com/blog/&#34;&gt;http://www.mysite.com/blog/&lt;/a&gt;&lt;/em&gt; which contains a index.html. You will have to call index.html explicitly (&lt;em&gt;&lt;a href=&#34;http://www.mysite.com/blog/index.html&#34;&gt;http://www.mysite.com/blog/index.html&lt;/a&gt;&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin Path:&lt;/strong&gt; Empty or &lt;em&gt;/&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin ID:&lt;/strong&gt; Enter a descriptive ID for this origin: S3-mysite.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compress Objects Automatically:&lt;/strong&gt; Yes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Price Class:&lt;/strong&gt; US and Europe&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alternate Domain Names (CNAMEs):&lt;/strong&gt; Enter the domain names you would like to redirect to Cloudfront, one at each line. If you don&amp;rsquo;t specify your domains here, you will get an &lt;strong&gt;Access Denied&lt;/strong&gt; error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cloudfront.mysite.com
www.mysite.com
mysite.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; &lt;em&gt;index.html&lt;/em&gt; (If you don&amp;rsquo;t put this, you will get access denied unless you provide full path to the html file.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then press &lt;strong&gt;Create Distribution&lt;/strong&gt;. In the distributon list, you will see Domain Name column. We will use the domain name written here (&lt;em&gt;abcdefghi.cloudfront.net&lt;/em&gt;) on Route53. It may take some time to see the system has been fully deployed.&lt;/p&gt;

&lt;h2 id=&#34;route53:002aebe340d456bc11a63f3385f2d580&#34;&gt;Route53&lt;/h2&gt;

&lt;p&gt;Add &lt;em&gt;A record&lt;/em&gt; for your Hosted Zone.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; cloudfront.mysite.com.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; &lt;em&gt;A - IPv4 Address&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alias:&lt;/strong&gt; &lt;em&gt;Yes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alias Target:&lt;/strong&gt; &lt;em&gt;abcdefghi.cloudfront.net.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then press &lt;strong&gt;Create&lt;/strong&gt;. It may take some time until cloudfront.mysite.com is propagated to DNS servers. When Cloudfront is deployed and enabled, Route 53 A records are active, you will see your website on &lt;em&gt;cloudfront.mysite.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check if your site is served through CloudFront:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -svo /dev/null http://www.mysite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if you can access subdirectories like &lt;em&gt;&lt;a href=&#34;http://cloudfront.mysite.com/blog/&#34;&gt;http://cloudfront.mysite.com/blog/&lt;/a&gt;&lt;/em&gt; after placing an index.html in it.&lt;/p&gt;

&lt;p&gt;If it works, create a similar A Record for www.mysite.com and mysite.com&lt;/p&gt;

&lt;h2 id=&#34;going-back-to-s3:002aebe340d456bc11a63f3385f2d580&#34;&gt;Going Back to S3&lt;/h2&gt;

&lt;p&gt;If you wish to stop using Cloudfront and go back to S3 serving, update www.mysite.com A record alias. Delete the URL written there, then a list will appear. Choose your S3 bucket (www.mysite.com) and &lt;strong&gt;Save Record Set&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;restricting-s3-access-to-cloudfront:002aebe340d456bc11a63f3385f2d580&#34;&gt;Restricting S3 access to Cloudfront&lt;/h2&gt;

&lt;p&gt;You may want to allow only CloudFront to access your S3 Bucket so that DDoS attackers can&amp;rsquo;t attack on your S3 bucket&amp;rsquo;s web endpoint, causing you thousands of dollars.&lt;/p&gt;

&lt;h3 id=&#34;cloudfront-1:002aebe340d456bc11a63f3385f2d580&#34;&gt;Cloudfront&lt;/h3&gt;

&lt;p&gt;Click on your distribution, navigate to &lt;strong&gt;Origins&lt;/strong&gt; tab, choose origin in the list and press &lt;strong&gt;Edit&lt;/strong&gt;. Add a new header on &lt;strong&gt;Origin Custom Headers&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header Name:&lt;/strong&gt; User-Agent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; abcdefghi123 (replace this with something random, this will be the password)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now Amazon Cloudfront will add &lt;em&gt;User-Agent: abcdefghi123&lt;/em&gt; on each request it is forwarding to Amazon S3.&lt;/p&gt;

&lt;h3 id=&#34;amazon-s3-1:002aebe340d456bc11a63f3385f2d580&#34;&gt;Amazon S3&lt;/h3&gt;

&lt;p&gt;On S3 permissions, click Bucket Policy Editor and fill is as the following. This will limit the resources to AWS network and allow only requests from User Agent &amp;ldquo;abcdefghi123&amp;rdquo;. Only the ones who provide this password through User-Agent will be able to access the bucket.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
	&amp;quot;Statement&amp;quot;: [
		{
			&amp;quot;Sid&amp;quot;: &amp;quot;PublicReadGetObject&amp;quot;,
			&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
			&amp;quot;Principal&amp;quot;: {
				&amp;quot;AWS&amp;quot;: &amp;quot;*&amp;quot;
			},
			&amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
			&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::www.mysite.com/*&amp;quot;,
			&amp;quot;Condition&amp;quot;: {
				&amp;quot;StringEqualsIgnoreCase&amp;quot;: {
					&amp;quot;aws:UserAgent&amp;quot;: &amp;quot;abcdefghi123&amp;quot;
				}
			}
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running RStudio on Remote Server</title>
      <link>http://tuts.emrealadag.com/post/running-rstudio-on-remote-server/</link>
      <pubDate>Mon, 23 Nov 2015 16:14:21 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/running-rstudio-on-remote-server/</guid>
      <description>&lt;p&gt;In this tutorial, we are going to build a Remote R Server. Following this tutorial, you will be able to run your R codes on a remote server so that it runs more efficiently or it doesn&amp;rsquo;t heat up your laptop. You can read the &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200552306-Getting-Started&#34;&gt;detailed benefits&lt;/a&gt;. You can use any remote server for this purpose. You can use AWS, DigitalOcean, Scaleway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Scaleway has currently ARM processors thus require compilation from source code. Also some R packages are not compatible with ARM processors.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;RStudio server installation page&lt;/a&gt; for up-to-date version.&lt;/p&gt;

&lt;p&gt;On your server install R-base:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install r-base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we will install RStudio server. If you processor is 64 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-amd64.deb
$ sudo gdebi rstudio-server-0.99.486-amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it&amp;rsquo;s 32 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-i386.deb
$ sudo gdebi rstudio-server-0.99.486-i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Scaleway, your processor is ARM. So you have to compile RServer on your own. See the &lt;a href=&#34;https://github.com/jrowen/ARM-rstudio-server&#34;&gt;build script&lt;/a&gt; for this purpose. This script was prepared for Chromebook, so you don&amp;rsquo;t have to follow the guideline provided there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jrowen/ARM-rstudio-server
$ cd ARM-rstudio-server
$ sh build_rstudio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can take a while (maybe an hour). You can use nohup or  &lt;a href=&#34;http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session&#34;&gt;tmux&lt;/a&gt; to avoid losing your session.&lt;/p&gt;

&lt;p&gt;Check if rstudio-server.service file exists. If it doesn&amp;rsquo;t, copy it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /etc/systemd/system/rstudio-server.service
$ cp src/cpp/server/extras/systemd/rstudio-server.service /etc/systemd/system/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can start rstudio-server service with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ service rstudio-server start
$ service --status-all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a + sign in front of rstudio-server. In order to login the web panel, you have to create a custom user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adduser michael
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Answer the questions and now you can access your web panel via http://&lt;server-ip&gt;:8787 with your user michael. In this panel, you can use web-based RStudio.&lt;/p&gt;

&lt;p&gt;Some requirements could be Pandoc for Knitting HTML, MySQL Client for RMySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install pandoc
$ libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nevertheless, you may encounter some packages (like caret) being missing due to ARM incompatibility.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Standalone Spark Cluster</title>
      <link>http://tuts.emrealadag.com/post/installing-standalone-spark-cluster/</link>
      <pubDate>Mon, 26 Oct 2015 16:09:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/installing-standalone-spark-cluster/</guid>
      <description>

&lt;h1 id=&#34;installing-spark-in-standalone-mode:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Installing Spark in Standalone Mode&lt;/h1&gt;

&lt;p&gt;You can install and run Spark without needing to install YARN or Hadoop. Make sure your system has Java JDK installed. Just download the latest binary Spark with Hadoop version and extract it.&lt;/p&gt;

&lt;p&gt;For demo, let us assume our master server IP is 123.456.789.123.&lt;/p&gt;

&lt;h2 id=&#34;running-the-master-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the master service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Give the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-master.sh -h 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will start the master and let it listen everybody (out of the network). It will use as much as memory and CPU it can. Now locate to the &lt;a href=&#34;http://123.456.789.123:8080&#34;&gt;http://123.456.789.123:8080&lt;/a&gt; port and see the control panel of the master service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-the-slave-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the slave service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After installing the master, you can run a slave node (either on the same machine or another machine) with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-slave.sh $MASTER
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We need to have a folder to store jar files:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;submitting-a-job-to-the-spark-master:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Submitting a job to the Spark master&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt-assembly&lt;/a&gt; and in the project folder package the project with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt assembly
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will create a jar file. Copy it to the spark/bin folder of each worker node using scp:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp HelloWorld-assembly-1.0.jar user@123.456.789:/home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We then will submit the job to the server with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./spark-submit --deploy-mode cluster --master spark://123.456.789.123:6066 --class HelloWorld /home/user/jars/HelloWorld-assembly-1.0.jar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
