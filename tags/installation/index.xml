<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Installation on Tutorials by Ahmet Emre Aladağ </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tutorials.emrealadag.com/tags/installation/</link>
    <language>en-us</language>
    <author>Ahmet Emre Aladağ</author>
    
    <updated>Mon, 23 Nov 2015 16:14:21 EET</updated>
    
    <item>
      <title>Running RStudio on Remote Server</title>
      <link>http://tutorials.emrealadag.com/post/running-rstudio-on-remote-server/</link>
      <pubDate>Mon, 23 Nov 2015 16:14:21 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tutorials.emrealadag.com/post/running-rstudio-on-remote-server/</guid>
      <description>&lt;p&gt;In this tutorial, we are going to build a Remote R Server. Following this tutorial, you will be able to run your R codes on a remote server so that it runs more efficiently or it doesn&amp;rsquo;t heat up your laptop. You can read the &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200552306-Getting-Started&#34;&gt;detailed benefits&lt;/a&gt;. You can use any remote server for this purpose. You can use AWS, DigitalOcean, Scaleway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Scaleway has currently ARM processors thus require compilation from source code. Also some R packages are not compatible with ARM processors.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;RStudio server installation page&lt;/a&gt; for up-to-date version.&lt;/p&gt;

&lt;p&gt;On your server install R-base:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install r-base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we will install RStudio server. If you processor is 64 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-amd64.deb
$ sudo gdebi rstudio-server-0.99.486-amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it&amp;rsquo;s 32 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-i386.deb
$ sudo gdebi rstudio-server-0.99.486-i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Scaleway, your processor is ARM. So you have to compile RServer on your own. See the &lt;a href=&#34;https://github.com/jrowen/ARM-rstudio-server&#34;&gt;build script&lt;/a&gt; for this purpose. This script was prepared for Chromebook, so you don&amp;rsquo;t have to follow the guideline provided there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jrowen/ARM-rstudio-server
$ cd ARM-rstudio-server
$ sh build_rstudio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can take a while (maybe an hour). You can use nohup or  &lt;a href=&#34;http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session&#34;&gt;tmux&lt;/a&gt; to avoid losing your session.&lt;/p&gt;

&lt;p&gt;Check if rstudio-server.service file exists. If it doesn&amp;rsquo;t, copy it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /etc/systemd/system/rstudio-server.service
$ cp src/cpp/server/extras/systemd/rstudio-server.service /etc/systemd/system/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can start rstudio-server service with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ service rstudio-server start
$ service --status-all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a + sign in front of rstudio-server. In order to login the web panel, you have to create a custom user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adduser michael
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Answer the questions and now you can access your web panel via http://&lt;server-ip&gt;:8787 with your user michael. In this panel, you can use web-based RStudio.&lt;/p&gt;

&lt;p&gt;Some requirements could be Pandoc for Knitting HTML, MySQL Client for RMySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install pandoc
$ libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nevertheless, you may encounter some packages (like caret) being missing due to ARM incompatibility.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Standalone Spark Cluster</title>
      <link>http://tutorials.emrealadag.com/post/installing-standalone-spark-cluster/</link>
      <pubDate>Mon, 26 Oct 2015 16:09:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tutorials.emrealadag.com/post/installing-standalone-spark-cluster/</guid>
      <description>

&lt;h1 id=&#34;installing-spark-in-standalone-mode:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Installing Spark in Standalone Mode&lt;/h1&gt;

&lt;p&gt;You can install and run Spark without needing to install YARN or Hadoop. Make sure your system has Java JDK installed. Just download the latest binary Spark with Hadoop version and extract it.&lt;/p&gt;

&lt;p&gt;For demo, let us assume our master server IP is 123.456.789.123.&lt;/p&gt;

&lt;h2 id=&#34;running-the-master-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the master service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Give the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-master.sh -h 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will start the master and let it listen everybody (out of the network). It will use as much as memory and CPU it can. Now locate to the &lt;a href=&#34;http://123.456.789.123:8080&#34;&gt;http://123.456.789.123:8080&lt;/a&gt; port and see the control panel of the master service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-the-slave-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the slave service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After installing the master, you can run a slave node (either on the same machine or another machine) with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-slave.sh $MASTER
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We need to have a folder to store jar files:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;submitting-a-job-to-the-spark-master:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Submitting a job to the Spark master&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt-assembly&lt;/a&gt; and in the project folder package the project with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt assembly
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will create a jar file. Copy it to the spark/bin folder of each worker node using scp:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp HelloWorld-assembly-1.0.jar user@123.456.789:/home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We then will submit the job to the server with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./spark-submit --deploy-mode cluster --master spark://123.456.789.123:6066 --class HelloWorld /home/user/jars/HelloWorld-assembly-1.0.jar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
