<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Tutorials by Ahmet Emre Aladağ </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tuts.emrealadag.com/</link>
    <language>en-us</language>
    <author>Ahmet Emre Aladağ</author>
    
    <updated>Thu, 19 May 2016 13:40:59 &#43;0200</updated>
    
    <item>
      <title>Remote Desktop Connection on Ad-Hoc LAN</title>
      <link>http://tuts.emrealadag.com/post/remote-desktop-connection-on-adhoc-lan/</link>
      <pubDate>Thu, 19 May 2016 13:40:59 &#43;0200</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/remote-desktop-connection-on-adhoc-lan/</guid>
      <description>

&lt;h2 id=&#34;summary:33a48a73c2fdf017c5c8854f56540a3e&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You want to:&lt;/strong&gt; See your PC/laptop screen from your mobile phone
&lt;strong&gt;But:&lt;/strong&gt; Your Internet connection is inconsistent and your mobile connection is limited.
&lt;strong&gt;Solution::&lt;/strong&gt; Connect to your PC/laptop over Ad-Hoc Network&lt;/p&gt;

&lt;h2 id=&#34;requirements:33a48a73c2fdf017c5c8854f56540a3e&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You have Android mobile phone with mobile Internet access (3G) even for a few seconds&lt;/li&gt;
&lt;li&gt;You have WiFi access on your PC/laptop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;instructions:33a48a73c2fdf017c5c8854f56540a3e&#34;&gt;Instructions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install Teamviewer on your PC and Teamviewer Remote Control on your Android phone.&lt;/li&gt;
&lt;li&gt;Setup AdHoc Network from your Android Phone: &amp;ldquo;Use this phone as an access point&amp;rdquo; (see top bar or settings menu)&lt;/li&gt;
&lt;li&gt;Turn on mobile Internet (3G).&lt;/li&gt;
&lt;li&gt;On your PC, connect to Wifi generated by your phone with credentials given.&lt;/li&gt;
&lt;li&gt;Now both phone and PC has internet access over 3G.&lt;/li&gt;
&lt;li&gt;Open Teamviewer on your PC. Read the code given.&lt;/li&gt;
&lt;li&gt;Open Teamviewer Remote Control on your phone and enter the code there. Start connection. You will see PC Desktop on your mobile phone&amp;rsquo;s screen.&lt;/li&gt;
&lt;li&gt;Now open top bar of your mobile phone and turn off 3G. Don&amp;rsquo;t turn off Ad-Hoc Network.&lt;/li&gt;
&lt;li&gt;Now your PC and phone can keep connected even 3G is off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redirecting Akka Documentation URLs</title>
      <link>http://tuts.emrealadag.com/post/redirecting-akka-documentation-url/</link>
      <pubDate>Sat, 30 Apr 2016 16:40:59 &#43;0200</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/redirecting-akka-documentation-url/</guid>
      <description>&lt;p&gt;When you search for Akka-related things on Google and you want to display a page on Akka Documentation, two problems might arise:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) You are a Scala developer and the Google result is for Java.
2) You are using version 2.4.2 but the page is for 2.3.13.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or maybe both. You would probably wish a plugin to redirect you to correct page automatically. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://doc.akka.io/docs/akka/2.3.13/java/actors.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://doc.akka.io/docs/akka/2.4.2/scala/actors.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use &lt;a href=&#34;https://chrome.google.com/webstore/detail/redirector/pajiegeliagebegjdhebejdlknciafen/related&#34;&gt;this Chrome plugin&lt;/a&gt; to set regex URL redirections.&lt;/p&gt;

&lt;p&gt;For Akka version 2.4.2 supporting Scala, add the following regex rules on the settings page of the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;From: ^http://doc.akka.io/docs/akka/(.*?)/(.*)/(.*)    
To: http://doc.akka.io/docs/akka/2.4.2/scala/$3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are similar plugins for Safari but I could see none with regex support.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LetsEncrypt HAProxy with DNS challenge</title>
      <link>http://tuts.emrealadag.com/post/letsencrypt-haproxy-with-dns-challenge/</link>
      <pubDate>Thu, 17 Mar 2016 18:30:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/letsencrypt-haproxy-with-dns-challenge/</guid>
      <description>&lt;p&gt;In this post, I will be showing you how to issue LetsEncrypt SSL certificate for your HAProxy running on Docker container. We will be using DNS challenge to verify we own the domains. hook.rb script will connect to Amazon Route 53 to update DNS records for this reason.&lt;/p&gt;

&lt;p&gt;letsencrypt.sh will start the challenge and start hook.rb to update DNS records and then check if records are updated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lukas2511/letsencrypt.sh
cd letsencrypt.sh
cp domains.txt.example domains.txt
cp config.sh.example config.sh

wget https://gist.githubusercontent.com/tache/3b6760784c098c9139c6/raw/33fe6e0791a7d40ce7cdf14019b7d31801d4ab05/hook.rb
sudo apt-get install ruby
sudo gem install aws-sdk pry awesome_print domainatrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then set your environment variables that can modify Amazon Route 53:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export AWS_ACCESS_KEY_ID=&amp;quot;xx&amp;quot;
export AWS_SECRET_ACCESS_KEY=&amp;quot;xx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit config.sh and set the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CHALLENGETYPE=&amp;quot;dns-01&amp;quot;
HOOK=&amp;quot;/home/ubuntu/letsencrypt.sh/hook.rb&amp;quot;
CONTACT_EMAIL=&amp;quot;your@email.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit domains.txt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main.domain.com sub1.main.domain.com sub2.main.domain.com sub3.main.domain.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the script to issue the certificate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./letsencrypt.sh -c -k /home/ubuntu/letsencrypt.sh/hook.rb
cd /home/ubuntu/letsencrypt.sh/certs/main.domain.com/
cat privkey.pem fullchain.pem &amp;gt; certificate.pem
sudo cp /etc/haproxy/certificate.pem /etc/haproxy/certificate.pem.old
sudo cp certificate.pem /etc/haproxy/certificate.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make sure you have certificate.pem and SSL configured haproxy.cfg in /etc/haproxy.cfg. You can add SSL support with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frontend marathon_https_in
  bind *:443 ssl crt /etc/haproxy/certificate.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then start your HAProxy container with Docker image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 443:443 -p 80:80 --name haproxy -v /etc/haproxy:/etc/haproxy:ro -v /dev/log:/dev/log million12/haproxy
#docker restart haproxy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cloudfront CDN for Amazon S3 Static Web Hosting</title>
      <link>http://tuts.emrealadag.com/post/cloudfront-cdn-for-s3-static-web-hosting/</link>
      <pubDate>Sat, 09 Jan 2016 12:09:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/cloudfront-cdn-for-s3-static-web-hosting/</guid>
      <description>

&lt;p&gt;In this post, I will be guiding you how to setup an Amazon S3 bucket as a static website, then configure CloudFront CDN to serve in front of Amazon S3. Outline is as following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a S3 Bucket&lt;/li&gt;
&lt;li&gt;Configure Amazon S3 to serve as a static website&lt;/li&gt;
&lt;li&gt;Create Cloudfront distribution.&lt;/li&gt;
&lt;li&gt;Set Route53 records&lt;/li&gt;
&lt;li&gt;Restrict S3 access to Cloudfront&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;amazon-s3:002aebe340d456bc11a63f3385f2d580&#34;&gt;Amazon S3&lt;/h2&gt;

&lt;p&gt;Create an S3 bucket and then follow &lt;strong&gt;Amazon S3 bucket properties&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permissions&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Edit bucket policy&lt;/strong&gt; and paste the following text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
	&amp;quot;Statement&amp;quot;: [
		{
			&amp;quot;Sid&amp;quot;: &amp;quot;PublicReadGetObject&amp;quot;,
			&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
			&amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
			&amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
			&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::www.mysite.com/*&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazon S3 bucket properties -&amp;gt; Static Web Hosting, choose &lt;strong&gt;Enable website hosting&lt;/strong&gt; and provide Index Document as &lt;em&gt;index.html&lt;/em&gt;. You will see the site url there: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt;. Now upload some file and check if your site is working.&lt;/p&gt;

&lt;h2 id=&#34;cloudfront:002aebe340d456bc11a63f3385f2d580&#34;&gt;Cloudfront&lt;/h2&gt;

&lt;p&gt;Navigate to CloudFront. Click on &lt;a href=&#34;https://console.aws.amazon.com/cloudfront/home?region=us-east-1#create-distribution:&#34;&gt;Create Distribution&lt;/a&gt; button. Choose &lt;strong&gt;Get Started&lt;/strong&gt; below &lt;strong&gt;Web&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Domain Name&lt;/strong&gt;: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt; (write the path you see in Amazon S3 bucket properties -&amp;gt; Static Web Hosting -&amp;gt; Endpoint: &lt;em&gt;www.mysite.com.s3-website-eu-west-1.amazonaws.com&lt;/em&gt;). You could choose your S3 Bucket here but if you do so, you won&amp;rsquo;t be able to display subdirectories: &lt;em&gt;&lt;a href=&#34;http://www.mysite.com/blog/&#34;&gt;http://www.mysite.com/blog/&lt;/a&gt;&lt;/em&gt; which contains a index.html. You will have to call index.html explicitly (&lt;em&gt;&lt;a href=&#34;http://www.mysite.com/blog/index.html&#34;&gt;http://www.mysite.com/blog/index.html&lt;/a&gt;&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin Path:&lt;/strong&gt; Empty or &lt;em&gt;/&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin ID:&lt;/strong&gt; Enter a descriptive ID for this origin: S3-mysite.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compress Objects Automatically:&lt;/strong&gt; Yes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Price Class:&lt;/strong&gt; US and Europe&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alternate Domain Names (CNAMEs):&lt;/strong&gt; Enter the domain names you would like to redirect to Cloudfront, one at each line. If you don&amp;rsquo;t specify your domains here, you will get an &lt;strong&gt;Access Denied&lt;/strong&gt; error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cloudfront.mysite.com
www.mysite.com
mysite.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Default Root Object:&lt;/strong&gt; &lt;em&gt;index.html&lt;/em&gt; (If you don&amp;rsquo;t put this, you will get access denied unless you provide full path to the html file.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then press &lt;strong&gt;Create Distribution&lt;/strong&gt;. In the distributon list, you will see Domain Name column. We will use the domain name written here (&lt;em&gt;abcdefghi.cloudfront.net&lt;/em&gt;) on Route53. It may take some time to see the system has been fully deployed.&lt;/p&gt;

&lt;h2 id=&#34;route53:002aebe340d456bc11a63f3385f2d580&#34;&gt;Route53&lt;/h2&gt;

&lt;p&gt;Add &lt;em&gt;A record&lt;/em&gt; for your Hosted Zone.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; cloudfront.mysite.com.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; &lt;em&gt;A - IPv4 Address&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alias:&lt;/strong&gt; &lt;em&gt;Yes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alias Target:&lt;/strong&gt; &lt;em&gt;abcdefghi.cloudfront.net.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then press &lt;strong&gt;Create&lt;/strong&gt;. It may take some time until cloudfront.mysite.com is propagated to DNS servers. When Cloudfront is deployed and enabled, Route 53 A records are active, you will see your website on &lt;em&gt;cloudfront.mysite.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check if your site is served through CloudFront:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -svo /dev/null http://www.mysite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if you can access subdirectories like &lt;em&gt;&lt;a href=&#34;http://cloudfront.mysite.com/blog/&#34;&gt;http://cloudfront.mysite.com/blog/&lt;/a&gt;&lt;/em&gt; after placing an index.html in it.&lt;/p&gt;

&lt;p&gt;If it works, create a similar A Record for www.mysite.com and mysite.com&lt;/p&gt;

&lt;h2 id=&#34;going-back-to-s3:002aebe340d456bc11a63f3385f2d580&#34;&gt;Going Back to S3&lt;/h2&gt;

&lt;p&gt;If you wish to stop using Cloudfront and go back to S3 serving, update www.mysite.com A record alias. Delete the URL written there, then a list will appear. Choose your S3 bucket (www.mysite.com) and &lt;strong&gt;Save Record Set&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;restricting-s3-access-to-cloudfront:002aebe340d456bc11a63f3385f2d580&#34;&gt;Restricting S3 access to Cloudfront&lt;/h2&gt;

&lt;p&gt;You may want to allow only CloudFront to access your S3 Bucket so that DDoS attackers can&amp;rsquo;t attack on your S3 bucket&amp;rsquo;s web endpoint, causing you thousands of dollars.&lt;/p&gt;

&lt;h3 id=&#34;cloudfront-1:002aebe340d456bc11a63f3385f2d580&#34;&gt;Cloudfront&lt;/h3&gt;

&lt;p&gt;Click on your distribution, navigate to &lt;strong&gt;Origins&lt;/strong&gt; tab, choose origin in the list and press &lt;strong&gt;Edit&lt;/strong&gt;. Add a new header on &lt;strong&gt;Origin Custom Headers&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header Name:&lt;/strong&gt; User-Agent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; abcdefghi123 (replace this with something random, this will be the password)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now Amazon Cloudfront will add &lt;em&gt;User-Agent: abcdefghi123&lt;/em&gt; on each request it is forwarding to Amazon S3.&lt;/p&gt;

&lt;h3 id=&#34;amazon-s3-1:002aebe340d456bc11a63f3385f2d580&#34;&gt;Amazon S3&lt;/h3&gt;

&lt;p&gt;On S3 permissions, click Bucket Policy Editor and fill is as the following. This will limit the resources to AWS network and allow only requests from User Agent &amp;ldquo;abcdefghi123&amp;rdquo;. Only the ones who provide this password through User-Agent will be able to access the bucket.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
	&amp;quot;Statement&amp;quot;: [
		{
			&amp;quot;Sid&amp;quot;: &amp;quot;PublicReadGetObject&amp;quot;,
			&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
			&amp;quot;Principal&amp;quot;: {
				&amp;quot;AWS&amp;quot;: &amp;quot;*&amp;quot;
			},
			&amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
			&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::www.mysite.com/*&amp;quot;,
			&amp;quot;Condition&amp;quot;: {
				&amp;quot;StringEqualsIgnoreCase&amp;quot;: {
					&amp;quot;aws:UserAgent&amp;quot;: &amp;quot;abcdefghi123&amp;quot;
				}
			}
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Ubuntu Service for Flask server</title>
      <link>http://tuts.emrealadag.com/post/ubuntu-service-for-flask-server/</link>
      <pubDate>Sun, 27 Dec 2015 19:09:21 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/ubuntu-service-for-flask-server/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you have a flask app and you want to create an Ubuntu service for this app. This way, the service will restart whenever the server restarts or the service fails. Here is a sample flask app on &lt;strong&gt;/home/user/server.py&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
from flask import Flask, request
app = Flask(__name__)
@app.route(&#39;/&#39;, methods=[&#39;GET&#39;])
def index():
    return &amp;quot;Hello world&amp;quot;

if __name__ == &#39;__main__&#39;:
   app.run(host=&amp;quot;0.0.0.0&amp;quot;, port=31013)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to write the following service configuration in &lt;strong&gt;/etc/init/flask.conf&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;description &amp;quot;flask&amp;quot;
start on stopped rc RUNLEVEL=[2345]
respawn
exec python /home/user/server.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try &lt;strong&gt;sudo service flask start&lt;/strong&gt;. If you receive any error, you may have to create an additional file &lt;strong&gt;/lib/systemd/system/flask.service&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=Flask web server

[Install]
WantedBy=multi-user.target

[Service]
User=root
Group=root
PermissionsStartOnly=true
ExecStart=/home/user/server.py
TimeoutSec=600
Restart=on-failure
RuntimeDirectoryMode=755
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now can &lt;strong&gt;sudo service flask start/stop/status&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running RStudio on Remote Server</title>
      <link>http://tuts.emrealadag.com/post/running-rstudio-on-remote-server/</link>
      <pubDate>Mon, 23 Nov 2015 16:14:21 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/running-rstudio-on-remote-server/</guid>
      <description>&lt;p&gt;In this tutorial, we are going to build a Remote R Server. Following this tutorial, you will be able to run your R codes on a remote server so that it runs more efficiently or it doesn&amp;rsquo;t heat up your laptop. You can read the &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200552306-Getting-Started&#34;&gt;detailed benefits&lt;/a&gt;. You can use any remote server for this purpose. You can use AWS, DigitalOcean, Scaleway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Scaleway has currently ARM processors thus require compilation from source code. Also some R packages are not compatible with ARM processors.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;RStudio server installation page&lt;/a&gt; for up-to-date version.&lt;/p&gt;

&lt;p&gt;On your server install R-base:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install r-base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we will install RStudio server. If you processor is 64 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-amd64.deb
$ sudo gdebi rstudio-server-0.99.486-amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it&amp;rsquo;s 32 bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.486-i386.deb
$ sudo gdebi rstudio-server-0.99.486-i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Scaleway, your processor is ARM. So you have to compile RServer on your own. See the &lt;a href=&#34;https://github.com/jrowen/ARM-rstudio-server&#34;&gt;build script&lt;/a&gt; for this purpose. This script was prepared for Chromebook, so you don&amp;rsquo;t have to follow the guideline provided there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jrowen/ARM-rstudio-server
$ cd ARM-rstudio-server
$ sh build_rstudio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can take a while (maybe an hour). You can use nohup or  &lt;a href=&#34;http://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session&#34;&gt;tmux&lt;/a&gt; to avoid losing your session.&lt;/p&gt;

&lt;p&gt;Check if rstudio-server.service file exists. If it doesn&amp;rsquo;t, copy it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /etc/systemd/system/rstudio-server.service
$ cp src/cpp/server/extras/systemd/rstudio-server.service /etc/systemd/system/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can start rstudio-server service with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ service rstudio-server start
$ service --status-all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a + sign in front of rstudio-server. In order to login the web panel, you have to create a custom user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ adduser michael
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Answer the questions and now you can access your web panel via http://&lt;server-ip&gt;:8787 with your user michael. In this panel, you can use web-based RStudio.&lt;/p&gt;

&lt;p&gt;Some requirements could be Pandoc for Knitting HTML, MySQL Client for RMySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install pandoc
$ libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nevertheless, you may encounter some packages (like caret) being missing due to ARM incompatibility.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Standalone Spark Cluster</title>
      <link>http://tuts.emrealadag.com/post/installing-standalone-spark-cluster/</link>
      <pubDate>Mon, 26 Oct 2015 16:09:37 EET</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/installing-standalone-spark-cluster/</guid>
      <description>

&lt;h1 id=&#34;installing-spark-in-standalone-mode:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Installing Spark in Standalone Mode&lt;/h1&gt;

&lt;p&gt;You can install and run Spark without needing to install YARN or Hadoop. Make sure your system has Java JDK installed. Just download the latest binary Spark with Hadoop version and extract it.&lt;/p&gt;

&lt;p&gt;For demo, let us assume our master server IP is 123.456.789.123.&lt;/p&gt;

&lt;h2 id=&#34;running-the-master-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the master service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Give the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-master.sh -h 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will start the master and let it listen everybody (out of the network). It will use as much as memory and CPU it can. Now locate to the &lt;a href=&#34;http://123.456.789.123:8080&#34;&gt;http://123.456.789.123:8080&lt;/a&gt; port and see the control panel of the master service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-the-slave-service:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Running the slave service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After installing the master, you can run a slave node (either on the same machine or another machine) with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SPARK_MASTER_IP=123.456.789.123
export MASTER=spark://${SPARK_MASTER_IP}:7077
./sbin/start-slave.sh $MASTER
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We need to have a folder to store jar files:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;submitting-a-job-to-the-spark-master:55f44a8afacb8e5eb85361a9acfcba6d&#34;&gt;Submitting a job to the Spark master&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt-assembly&lt;/a&gt; and in the project folder package the project with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt assembly
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will create a jar file. Copy it to the spark/bin folder of each worker node using scp:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp HelloWorld-assembly-1.0.jar user@123.456.789:/home/user/jars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We then will submit the job to the server with:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./spark-submit --deploy-mode cluster --master spark://123.456.789.123:6066 --class HelloWorld /home/user/jars/HelloWorld-assembly-1.0.jar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running Play Apps via Docker</title>
      <link>http://tuts.emrealadag.com/post/running-play-apps-via-docker/</link>
      <pubDate>Sat, 03 Oct 2015 16:40:59 &#43;0200</pubDate>
      <author>Ahmet Emre Aladağ</author>
      <guid>http://tuts.emrealadag.com/post/running-play-apps-via-docker/</guid>
      <description>

&lt;p&gt;In this tutorial, I will guide you running your Play framework application (named MyProject in our tutorial) via Docker. I assume you have created a Play project with a build.sbt (or equivalent) file and make sure it&amp;rsquo;s running on port 9000 with sbt run command.&lt;/p&gt;

&lt;p&gt;Our demo project pulls tweets from Twitter of a specified person so it requires environment variables &lt;em&gt;CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET&lt;/em&gt; to be set before running.&lt;/p&gt;

&lt;h2 id=&#34;docker-installation:3ed2385a48282d0dcf272bc98aec98c2&#34;&gt;Docker Installation&lt;/h2&gt;

&lt;p&gt;Make sure you have installed the latest version of Docker Toolbox. In order to use docker command, Docker needs some environment variables to be set. To do this, Docker introduces Docker QuickStart Terminal.&lt;/p&gt;

&lt;p&gt;Run Docker Quickstart Terminal from Launchpad. A new terminal tab will open either on Terminal or iTerm app (depending on which one you chose at the installation). Check if any docker containers exist:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets check the DOCKER_HOST (we will use this IP instead of localhost when reaching the app).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $DOCKER_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see something like tcp://192.168.99.100:2376. This means we will use IP address 192.168.99.100 for reaching our apps.&lt;/p&gt;

&lt;h2 id=&#34;building-docker-image-with-sbt:3ed2385a48282d0dcf272bc98aec98c2&#34;&gt;Building Docker Image with SBT&lt;/h2&gt;

&lt;p&gt;Now that we have Docker installed and running, we can build a Docker image for our Play App. We can use SBT Native Packager plugin&amp;rsquo;s docker feature to build a Docker image for the Play app (named MyProject). Before using the plugin, we have to add some config parameters to build.sbt of the Play project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dockerExposedPorts := Seq(9000, 9443)
dockerExposedVolumes := Seq(&amp;quot;/opt/docker/logs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will add instructions to the Dockerfile to expose 9000 and 9443 ports and let us read logs outside the container. Then build the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd MyProject
$ sbt docker:publishLocal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now check docker images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see a table listing all docker images available.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;REPOSITORY&lt;/th&gt;
&lt;th&gt;TAG&lt;/th&gt;
&lt;th&gt;IMAGE ID&lt;/th&gt;
&lt;th&gt;CREATED&lt;/th&gt;
&lt;th&gt;VIRTUAL SIZE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;myproject&lt;/td&gt;
&lt;td&gt;1.0-SNAPSHOT&lt;/td&gt;
&lt;td&gt;cd25bf99efa9&lt;/td&gt;
&lt;td&gt;2 minutes ago&lt;/td&gt;
&lt;td&gt;925.8 MB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;java&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;7547e52aac4b&lt;/td&gt;
&lt;td&gt;3 weeks ago&lt;/td&gt;
&lt;td&gt;817.5 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;creating-the-container:3ed2385a48282d0dcf272bc98aec98c2&#34;&gt;Creating the Container&lt;/h2&gt;

&lt;p&gt;We now see the image named myproject created for our app. Let&amp;rsquo;s create a container with this image with environment variables and ports added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name MyProject -p 9000:9000 -e CONSUMER_KEY=abcd -e CONSUMER_SECRET=abcd -e ACCESS_TOKEN=abcd -e ACCESS_TOKEN_SECRET=abcd myproject:1.0-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use myproject image with 1.0-SNAPSHOT tag.&lt;/li&gt;
&lt;li&gt;expose port 9000 (right one) of inner Play app to 9000 (left one) of the outer system.&lt;/li&gt;
&lt;li&gt;name the container as myproject.&lt;/li&gt;
&lt;li&gt;give environment variables CONSUMER_KEY, CONSUMER_SECRET&amp;hellip; with -e parameter for each.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Console will show logs for the app and navigate to &lt;a href=&#34;http://192.168.99.100:9000&#34;&gt;http://192.168.99.100:9000&lt;/a&gt; (the DOCKER_HOST) to reach the app. You can stop the container with Ctrl/CMD+C.&lt;/p&gt;

&lt;h2 id=&#34;restarting-the-container:3ed2385a48282d0dcf272bc98aec98c2&#34;&gt;Restarting the Container&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the container has exited.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;CONTAINER ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IMAGE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;COMMAND&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;CREATED&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;STATUS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PORTS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NAMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;c9b768dac51e&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;myproject:1.0-SNAPSHOT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;bin/myproject&amp;rdquo;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10 minutes ago&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Exited (130) 30 seconds ago&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MyProject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now restart the container (initials of the id is sufficient):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker start c9b
$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we see the running containers:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CONTAINER ID&lt;/th&gt;
&lt;th&gt;IMAGE&lt;/th&gt;
&lt;th&gt;COMMAND&lt;/th&gt;
&lt;th&gt;CREATED&lt;/th&gt;
&lt;th&gt;STATUS&lt;/th&gt;
&lt;th&gt;PORTS&lt;/th&gt;
&lt;th&gt;NAMES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;c9b768dac51e&lt;/td&gt;
&lt;td&gt;myproject:1.0-SNAPSHOT&lt;/td&gt;
&lt;td&gt;&amp;ldquo;bin/myproject&amp;rdquo;&lt;/td&gt;
&lt;td&gt;11 minutes ago&lt;/td&gt;
&lt;td&gt;Up 13 seconds&lt;/td&gt;
&lt;td&gt;0.0.0.0:9000-&amp;gt;9000/tcp, 9443/tcp&lt;/td&gt;
&lt;td&gt;MyProject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;stopping-the-container:3ed2385a48282d0dcf272bc98aec98c2&#34;&gt;Stopping the Container&lt;/h2&gt;

&lt;p&gt;When you restart the container, it will run in the deamon mode. you can stop it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker stop c9b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re done!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
